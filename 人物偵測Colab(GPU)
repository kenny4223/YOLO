# =========================================================
# 步驟 1: 安裝、導入與檔案上傳
# =========================================================
print("--- 步驟 1/3: 設置環境與上傳檔案 ---")
!pip install ultralytics -qq
!pip install opencv-python -qq

# 導入所有必要的模組
from google.colab import files
import cv2
import torch
import time
from ultralytics import YOLO
import os
import sys

# --- 檔案上傳與路徑設定 ---
print("請上傳您的影片檔案 (建議使用 MP4 格式)。程式將等待您完成上傳...")
try:
    # 執行 Colab 檔案上傳功能
    uploaded = files.upload()

    if not uploaded:
        print("❌ 未偵測到檔案上傳。程式結束。")
        sys.exit()

    # 取得上傳的檔案名稱
    video_filename = list(uploaded.keys())[0]
    video_path = f"/content/{video_filename}"
    output_path = "output_tracked_video.mp4"

except Exception as e:
    print(f"❌ 檔案上傳失敗：{e}")
    sys.exit()

print(f"✅ 檔案 '{video_filename}' 上傳成功，開始設定模型。")


# --- 模型與硬體設定 ---
model = YOLO('yolov8n.pt')

# 設置裝置
device = "cuda" if torch.cuda.is_available() else "cpu"
model.to(device)
print(f"✅ 使用的裝置: {device}")

# 模型輸入尺寸
INFERENCE_IMG_SIZE = 320
print(f"📏 模型輸入尺寸: {INFERENCE_IMG_SIZE}x{INFERENCE_IMG_SIZE}")


# =========================================================
# 步驟 2: YOLOv8 影片處理迴圈 (只保留 Process FPS)
# =========================================================
print("\n--- 步驟 2/3: 影片處理與追蹤 (無即時畫面) ---")

# 讀取影片檔
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print("❌ 影片讀取失敗。")
    sys.exit()

# 獲取影片屬性
original_fps = cap.get(cv2.CAP_PROP_FPS)
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# 影片輸出設置
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter(output_path, fourcc, original_fps, (frame_width, frame_height))

if not out.isOpened():
    print("❌ 警告：影片寫入器開啟失敗，輸出檔案可能無法正確生成。")

# 初始化用於計算 FPS 的變數
prev_time = time.time()
frame_count = 0
total_start_time = time.time()
processing_fps = 0.0

print("⏳ 開始高速處理影片...")

while True:

    current_time = time.time()
    ret, frame = cap.read()

    if not ret:
        break # 影片播放結束

    # --- 執行 YOLOv8 追蹤 (無 inference_time 測量) ---
    results = model.track(frame,
                          classes=[0],
                          tracker='bytetrack.yaml',
                          conf=0.6,
                          imgsz=INFERENCE_IMG_SIZE,
                          verbose=False)

    # --- 計算 Process FPS (整體處理速度) ---
    elapsed_time = current_time - prev_time
    processing_fps = 1 / elapsed_time if elapsed_time > 0 else 0
    prev_time = current_time

    # --- 畫框 ---
    for result in results:
        if result.boxes.id is not None:
            boxes = result.boxes.xyxy.cpu().numpy().astype(int)
            track_ids = result.boxes.id.cpu().numpy().astype(int)

            for box, track_id in zip(boxes, track_ids):
                x1, y1, x2, y2 = box
                color = (0, 255, 0)
                cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                cv2.putText(frame, f"ID: {track_id}", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # 繪製 FPS 資訊到幀上
    # 只顯示整體 FPS
    cv2.putText(frame, f"FPS: {processing_fps:.2f}", (20, 40),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    if out.isOpened():
         out.write(frame)

    frame_count += 1

    # 顯示進度
    if frame_count % 100 == 0:
        print(f"  處理進度: 已處理 {frame_count} 幀. 當前 FPS: {processing_fps:.2f}")

# --- 資源釋放與總結 FPS ---
cap.release()
if out.isOpened():
    out.release()
    print(f"\n✅ 輸出影片已成功寫入 Colab 暫存空間: {output_path}")

total_end_time = time.time()
total_time = total_end_time - total_start_time

if frame_count > 0:
    average_fps = frame_count / total_time
    print("\n-------------------------------------------------")
    print(f"總幀數: {frame_count}")
    print(f"總耗時: {total_time:.2f} 秒")
    print(f"🚀 **平均處理 FPS: {average_fps:.2f} FPS**")
    print("-------------------------------------------------")
else:
    print("❌ 影片處理失敗，無法計算平均 FPS。")


# =========================================================
# 步驟 3: 下載輸出檔案
# =========================================================
print("\n--- 步驟 3/3: 下載輸出檔案 ---")
if os.path.exists(output_path):
    print(f"正在將 '{output_path}' 下載到您的電腦...")
    files.download(output_path)
    print("✅ 下載完成！請檢查您的下載資料夾。")
else:
    print("❌ 輸出檔案不存在，下載失敗。")

print("\n🎉 程式所有步驟執行完畢。")
